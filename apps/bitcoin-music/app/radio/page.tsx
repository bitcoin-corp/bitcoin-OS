'use client'

import { useState, useEffect } from 'react'
import { 
  Radio, 
  Play, 
  Pause, 
  Volume2, 
  Heart, 
  Share2, 
  Users, 
  Clock, 
  Music,
  Headphones,
  Mic,
  Signal,
  SkipForward,
  VolumeX,
  Plus,
  TrendingUp
} from 'lucide-react'

interface RadioStation {
  id: string
  name: string
  genre: string
  description: string
  listeners: number
  isLive: boolean
  currentTrack?: {
    title: string
    artist: string
    artwork: string
  }
  dj?: {
    name: string
    avatar: string
  }
}

interface Playlist {
  id: string
  title: string
  description: string
  tracks: number
  duration: string
  artwork: string
  genre: string
  plays: number
}

export default function RadioPage() {
  const [currentStation, setCurrentStation] = useState<string | null>(null)
  const [isPlaying, setIsPlaying] = useState(false)
  const [volume, setVolume] = useState(75)
  const [isMuted, setIsMuted] = useState(false)
  const [activeGenre, setActiveGenre] = useState('all')

  const genres = [
    'all', 'Electronic', 'Hip Hop', 'Rock', 'Jazz', 'Classical', 'Ambient', 'Pop', 'Techno', 'House'
  ]

  const [stations] = useState<RadioStation[]>([
    {
      id: '1',
      name: 'Bitcoin Beats FM',
      genre: 'Electronic',
      description: 'The hottest electronic tracks from verified Bitcoin Music artists',
      listeners: 2847,
      isLive: true,
      currentTrack: {
        title: 'Satoshi Dreams',
        artist: 'CryptoSynth',
        artwork: '/api/placeholder/200/200'
      },
      dj: {
        name: 'DJ BlockChain',
        avatar: '/api/placeholder/100/100'
      }
    },
    {
      id: '2',
      name: 'Decentralized Hip Hop',
      genre: 'Hip Hop',
      description: 'Underground hip hop celebrating the blockchain revolution',
      listeners: 1923,
      isLive: true,
      currentTrack: {
        title: 'Mining Rhymes',
        artist: 'Hash Master',
        artwork: '/api/placeholder/200/200'
      },
      dj: {
        name: 'MC Merkle',
        avatar: '/api/placeholder/100/100'
      }
    },
    {
      id: '3',
      name: 'Crypto Classical',
      genre: 'Classical',
      description: 'Timeless classical pieces reimagined for the digital age',
      listeners: 856,
      isLive: false,
      currentTrack: {
        title: 'Blockchain Symphony No. 1',
        artist: 'Digital Orchestra',
        artwork: '/api/placeholder/200/200'
      }
    },
    {
      id: '4',
      name: 'Ambient Algorithms',
      genre: 'Ambient',
      description: 'Ethereal soundscapes generated by AI and human collaboration',
      listeners: 1456,
      isLive: true,
      currentTrack: {
        title: 'Quantum Drift',
        artist: 'Neural Networks',
        artwork: '/api/placeholder/200/200'
      },
      dj: {
        name: 'AI Composer',
        avatar: '/api/placeholder/100/100'
      }
    },
    {
      id: '5',
      name: 'Rock the Blockchain',
      genre: 'Rock',
      description: 'High-energy rock music powered by blockchain technology',
      listeners: 3245,
      isLive: true,
      currentTrack: {
        title: 'Lightning Network',
        artist: 'Electric Nodes',
        artwork: '/api/placeholder/200/200'
      },
      dj: {
        name: 'Rocker Dave',
        avatar: '/api/placeholder/100/100'
      }
    },
    {
      id: '6',
      name: 'Jazz Nodes',
      genre: 'Jazz',
      description: 'Smooth jazz with a digital twist',
      listeners: 967,
      isLive: false,
      currentTrack: {
        title: 'Blue Coin Blues',
        artist: 'Smooth Operators',
        artwork: '/api/placeholder/200/200'
      }
    }
  ])

  const [playlists] = useState<Playlist[]>([
    {
      id: '1',
      title: 'Top Bitcoin Hits 2025',
      description: 'The most popular tracks on Bitcoin Music this year',
      tracks: 50,
      duration: '3h 25m',
      artwork: '/api/placeholder/300/300',
      genre: 'Mixed',
      plays: 145623
    },
    {
      id: '2',
      title: 'Crypto Chill Vibes',
      description: 'Relaxing ambient and lo-fi tracks for focused work',
      tracks: 32,
      duration: '2h 15m',
      artwork: '/api/placeholder/300/300',
      genre: 'Ambient',
      plays: 89234
    },
    {
      id: '3',
      title: 'DeFi Dance Floor',
      description: 'High-energy electronic beats for the decentralized generation',
      tracks: 28,
      duration: '1h 45m',
      artwork: '/api/placeholder/300/300',
      genre: 'Electronic',
      plays: 76543
    },
    {
      id: '4',
      title: 'Blockchain Classics',
      description: 'Timeless tracks that defined the crypto music movement',
      tracks: 40,
      duration: '2h 52m',
      artwork: '/api/placeholder/300/300',
      genre: 'Mixed',
      plays: 234567
    }
  ])

  const filteredStations = stations.filter(station => 
    activeGenre === 'all' || station.genre === activeGenre
  )

  const handleStationPlay = (stationId: string) => {
    if (currentStation === stationId && isPlaying) {
      setIsPlaying(false)
    } else {
      setCurrentStation(stationId)
      setIsPlaying(true)
    }
  }

  const currentStationData = stations.find(s => s.id === currentStation)

  return (
    <div 
      style={{ 
        minHeight: '100vh',
        background: 'linear-gradient(180deg, #1a1a1a 0%, #0a0a0a 100%)',
        paddingTop: '60px'
      }}
      className="p-6"
    >
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-4xl font-bold text-white mb-4 flex items-center gap-3">
            <Radio className="w-10 h-10 text-purple-500" />
            Bitcoin Music Radio
          </h1>
          <p className="text-gray-300 text-lg">
            Live streams, curated playlists, and 24/7 music from our community
          </p>
        </div>

        {/* Now Playing Bar */}
        {currentStationData && (
          <div className="bg-white/10 backdrop-blur-sm border border-white/20 rounded-xl p-4 mb-8">
            <div className="flex items-center gap-4">
              <div className="w-16 h-16 bg-gradient-to-br from-purple-600 to-pink-600 rounded-lg flex items-center justify-center">
                <Music className="w-8 h-8 text-white" />
              </div>
              <div className="flex-1">
                <div className="flex items-center gap-2 mb-1">
                  <span className="text-white font-medium">{currentStationData.name}</span>
                  {currentStationData.isLive && (
                    <span className="flex items-center gap-1 px-2 py-1 bg-red-600 rounded-full text-xs text-white">
                      <div className="w-2 h-2 bg-white rounded-full animate-pulse" />
                      LIVE
                    </span>
                  )}
                </div>
                {currentStationData.currentTrack && (
                  <p className="text-gray-300 text-sm">
                    {currentStationData.currentTrack.title} - {currentStationData.currentTrack.artist}
                  </p>
                )}
                <div className="flex items-center gap-2 text-gray-400 text-sm mt-1">
                  <Users className="w-4 h-4" />
                  {currentStationData.listeners.toLocaleString()} listeners
                </div>
              </div>
              <div className="flex items-center gap-4">
                <div className="flex items-center gap-2">
                  <button
                    onClick={() => setIsMuted(!isMuted)}
                    className="p-2 text-gray-400 hover:text-white transition-colors"
                  >
                    {isMuted ? <VolumeX className="w-5 h-5" /> : <Volume2 className="w-5 h-5" />}
                  </button>
                  <input
                    type="range"
                    min="0"
                    max="100"
                    value={isMuted ? 0 : volume}
                    onChange={(e) => setVolume(Number(e.target.value))}
                    className="w-20 accent-purple-500"
                  />
                </div>
                <button
                  onClick={() => handleStationPlay(currentStationData.id)}
                  className="p-3 bg-purple-600 rounded-full hover:bg-purple-700 transition-colors"
                >
                  {isPlaying ? (
                    <Pause className="w-6 h-6 text-white" />
                  ) : (
                    <Play className="w-6 h-6 text-white" />
                  )}
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Genre Filter */}
        <div className="flex flex-wrap gap-2 mb-8">
          {genres.map((genre) => (
            <button
              key={genre}
              onClick={() => setActiveGenre(genre)}
              className={`px-4 py-2 rounded-full transition-colors ${
                activeGenre === genre
                  ? 'bg-purple-600 text-white'
                  : 'bg-white/10 text-gray-400 hover:text-white hover:bg-white/20'
              }`}
            >
              {genre === 'all' ? 'All Genres' : genre}
            </button>
          ))}
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Live Stations */}
          <div className="lg:col-span-2">
            <div className="flex items-center gap-2 mb-6">
              <Signal className="w-6 h-6 text-purple-500" />
              <h2 className="text-2xl font-bold text-white">Live Stations</h2>
            </div>
            
            <div className="space-y-4">
              {filteredStations.map((station) => (
                <div 
                  key={station.id} 
                  className={`bg-white/5 backdrop-blur-sm border rounded-xl p-6 transition-all cursor-pointer hover:bg-white/10 ${
                    currentStation === station.id ? 'border-purple-500 bg-purple-500/10' : 'border-white/10'
                  }`}
                  onClick={() => handleStationPlay(station.id)}
                >
                  <div className="flex items-start gap-4">
                    <div className="w-20 h-20 bg-gradient-to-br from-purple-600 to-pink-600 rounded-lg flex items-center justify-center flex-shrink-0">
                      <Radio className="w-10 h-10 text-white" />
                    </div>
                    
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center gap-2 mb-2">
                        <h3 className="text-lg font-semibold text-white truncate">{station.name}</h3>
                        {station.isLive && (
                          <span className="flex items-center gap-1 px-2 py-1 bg-red-600 rounded-full text-xs text-white flex-shrink-0">
                            <div className="w-2 h-2 bg-white rounded-full animate-pulse" />
                            LIVE
                          </span>
                        )}
                      </div>
                      
                      <p className="text-gray-400 text-sm mb-3">{station.description}</p>
                      
                      {station.currentTrack && (
                        <div className="bg-black/30 rounded-lg p-3 mb-3">
                          <div className="flex items-center gap-2 mb-1">
                            <Music className="w-4 h-4 text-purple-400" />
                            <span className="text-purple-400 text-sm font-medium">Now Playing</span>
                          </div>
                          <p className="text-white text-sm font-medium">{station.currentTrack.title}</p>
                          <p className="text-gray-400 text-sm">{station.currentTrack.artist}</p>
                        </div>
                      )}
                      
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-4 text-sm text-gray-400">
                          <span className="flex items-center gap-1">
                            <Users className="w-4 h-4" />
                            {station.listeners.toLocaleString()}
                          </span>
                          <span className="px-2 py-1 bg-purple-600/20 text-purple-400 rounded">
                            {station.genre}
                          </span>
                          {station.dj && (
                            <span className="flex items-center gap-1">
                              <Mic className="w-4 h-4" />
                              {station.dj.name}
                            </span>
                          )}
                        </div>
                        
                        <div className="flex items-center gap-2">
                          <button className="p-2 text-gray-400 hover:text-white transition-colors">
                            <Heart className="w-4 h-4" />
                          </button>
                          <button className="p-2 text-gray-400 hover:text-white transition-colors">
                            <Share2 className="w-4 h-4" />
                          </button>
                          <button
                            className={`p-3 rounded-lg transition-colors ${
                              currentStation === station.id && isPlaying
                                ? 'bg-purple-600 text-white'
                                : 'bg-white/10 text-gray-400 hover:text-white hover:bg-white/20'
                            }`}
                          >
                            {currentStation === station.id && isPlaying ? (
                              <Pause className="w-5 h-5" />
                            ) : (
                              <Play className="w-5 h-5" />
                            )}
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Sidebar - Playlists & Featured */}
          <div className="space-y-8">
            {/* Featured Playlists */}
            <div>
              <div className="flex items-center gap-2 mb-4">
                <Headphones className="w-5 h-5 text-purple-500" />
                <h3 className="text-xl font-bold text-white">Featured Playlists</h3>
              </div>
              
              <div className="space-y-4">
                {playlists.map((playlist) => (
                  <div key={playlist.id} className="bg-white/5 backdrop-blur-sm border border-white/10 rounded-lg p-4 hover:bg-white/10 transition-colors cursor-pointer">
                    <div className="flex gap-3">
                      <div className="w-16 h-16 bg-gradient-to-br from-purple-600 to-pink-600 rounded-lg flex items-center justify-center flex-shrink-0">
                        <Music className="w-8 h-8 text-white" />
                      </div>
                      <div className="flex-1 min-w-0">
                        <h4 className="text-white font-medium truncate mb-1">{playlist.title}</h4>
                        <p className="text-gray-400 text-sm mb-2 line-clamp-2">{playlist.description}</p>
                        <div className="flex items-center gap-2 text-xs text-gray-500">
                          <span>{playlist.tracks} tracks</span>
                          <span>•</span>
                          <span>{playlist.duration}</span>
                          <span>•</span>
                          <span className="flex items-center gap-1">
                            <Play className="w-3 h-3" />
                            {playlist.plays.toLocaleString()}
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Trending Now */}
            <div className="bg-white/5 backdrop-blur-sm border border-white/10 rounded-xl p-6">
              <div className="flex items-center gap-2 mb-4">
                <TrendingUp className="w-5 h-5 text-purple-500" />
                <h3 className="text-lg font-bold text-white">Trending Now</h3>
              </div>
              
              <div className="space-y-3">
                {[
                  { title: 'Bitcoin Symphony', artist: 'CryptoComposer', plays: 45623 },
                  { title: 'Digital Dreams', artist: 'NFT Soundscape', plays: 32145 },
                  { title: 'Blockchain Beats', artist: 'Decentralized DJ', plays: 28934 },
                  { title: 'Mining Melodies', artist: 'Hash Harmonics', plays: 25678 }
                ].map((track, index) => (
                  <div key={index} className="flex items-center gap-3 p-2 rounded-lg hover:bg-white/5 transition-colors cursor-pointer">
                    <span className="text-purple-500 font-bold text-sm w-6">#{index + 1}</span>
                    <div className="flex-1 min-w-0">
                      <p className="text-white text-sm font-medium truncate">{track.title}</p>
                      <p className="text-gray-400 text-xs truncate">{track.artist}</p>
                    </div>
                    <div className="flex items-center gap-1 text-gray-500 text-xs">
                      <Play className="w-3 h-3" />
                      {track.plays.toLocaleString()}
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Create Station CTA */}
            <div className="bg-gradient-to-r from-purple-600/20 to-pink-600/20 border border-purple-500/30 rounded-xl p-6">
              <h3 className="text-white font-bold mb-2">Start Your Own Station</h3>
              <p className="text-gray-300 text-sm mb-4">
                Share your music with the Bitcoin Music community
              </p>
              <button className="w-full py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors flex items-center justify-center gap-2">
                <Plus className="w-4 h-4" />
                Create Station
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}